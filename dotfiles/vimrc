" Begin Vundle Config
" Following required for Vundle Plugin Manager
set nocompatible
filetype off
" Set the runtime path to include Vundle & init
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Let vundle manage vundle
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'idanarye/vim-merginal'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'flazz/vim-colorschemes'
Plugin 'godlygeek/tabular'
Plugin 'rodjek/vim-puppet'
Plugin 'fatih/vim-go'
Plugin 'zenbro/mirror.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'groenewege/vim-less'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'flowtype/vim-flow'
Plugin 'tmhedberg/SimpylFold'
" -----------------------------
" PLACE PLUGINS ABOVE THIS LINE
" Finish Vundle initialization
call vundle#end()
filetype plugin indent on
" End Vundle Config

set laststatus=2
set noshowmode
augroup FastEscape
	autocmd!
	au InsertEnter * set timeoutlen=0
	au InsertLeave * set timeoutlen=1000
augroup END

" Set backupcopy to yes. Necessary for some file watchers (webpack-dev-server)
" See: http://vimdoc.sourceforge.net/htmldoc/options.html#'backupcopy
set backupcopy=yes
" Define the leader key!
"let mapleader=" "
map <space> <leader>

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" Enable shared system clipboard by default
set clipboard=unnamedplus

" Turns on relative numbering by default
set number
set relativenumber

" Highlights matching brackets/braces/parens
set showmatch

" Set color
set t_Co=256

" Remap Ctl-C in visual mode to Esc. This lets us leave visual quicker...
vnoremap <ESC> <C-c>
" Some config for vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

"Change split nav
nnoremap <C-J> <C-W><C-j>
nnoremap <C-K> <C-W><C-k>
nnoremap <C-L> <C-W><C-l>
nnoremap <C-H> <C-W><C-h>

" Resize split windows
nnoremap <leader>j :res -5<CR>
nnoremap <leader>k :res +5<CR>
nnoremap <leader>h :vertical resize -5<CR>
nnoremap <leader>l :vertical resize +5<CR>

" Make nav between tabs easier
nnoremap <S-l> gt
nnoremap <S-h> gT

" File settings
" For Python
au BufNewFile,BufRead *.py,*.ts
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=100 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
    \ let python_highlight_all=1 |

" For js, html, and css:
au BufNewFile,BufRead *.js,*.jsx,*.html,*.css
	\ set tabstop=2 |
	\ set softtabstop=2 |
	\ set shiftwidth=2 |
        \ set expandtab |
	\ set autoindent |
	\ set fileformat=unix |

au BufNewFile,BufRead *.less
	\ set tabstop=2 |
	\ set softtabstop=2 |
	\ set shiftwidth=2 |
        \ set expandtab |
	\ set autoindent |
	\ set fileformat=unix |

" For yaml
au BufNewFile,BufRead *.yaml,*.yml,*.bashrc,*.go
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" Enable syntax highlighting?...
syntax on

" Enable utf-8 encoding
set encoding=utf-8

" A couple customizations to YouCompleteMe
" First, make sure suggestion closes after complete
let g:ycm_autoclose_preview_window_after_completion=1
" Second, map leader-g to goto definition
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Third, set the whitelist for this to work w/
let g:ycm_filetype_whitelist = {'cpp': 1, 'c': 1, 'python': 1, 'js': 1}

" Config for syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_js_checkers=['eslint']
let g:syntastic_jsx_checkers=['eslint']
let g:syntastic_javascript_checkers=['eslint']

" Config for NerdTree
let NERDTreeIgnore=['\.pyc$', '\~$']
map <C-n> :NERDTreeToggle<CR>

" Config indentLine
let g:indentLine_color_term = 239
let g:indentLine_char = '|'

"Try to set a colortheme
set background=dark
colorscheme zenburn 
" Enable syntax highlighting?...
syntax on
" Enable improved wildcards in command
set wildmenu

" Supress warning from switching between edited buffers
set hidden
set confirm

" Create a shortcut for showing taglist (Shift-T)
nnoremap <S-T> :TlistToggle<CR>

" Open definition in a vertical split (leader-]) and horz (leader--)
nnoremap <leader>] :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nnoremap <leader>- :sp <CR>:exec("tag ".expand("<cword>"))<CR>

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
" from: http://bit.ly/28ZBb2b
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
    let @/ = ''
    if exists('#auto_highlight')
        au! auto_highlight
        augroup! auto_highlight
        setl updatetime=4000
        echo 'Highlight current word: off'
        return 0
    else
        augroup auto_highlight
            au!
            au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
        augroup end
        setl updatetime=500
        echo 'Highlight current word: ON'
        return 1
    endif
endfunction

" Make .sld files use the .xml syntax highlighting
au BufNewFile,BufRead *.sld set filetype=xml

" Config for SimpylFold (folding for python)
let g:SimpylFold_docstring_preview=1
let g:SimpylFold_fold_import=0
autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
nnoremap <leader>o zo
nnoremap <leader>c zc
